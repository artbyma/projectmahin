// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class State extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rollCount", Value.fromI32(0));
    this.set("diagnosedCount", Value.fromI32(0));
    this.set("diagnosedTokenIds", Value.fromI32Array(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save State entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type State must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("State", id.toString(), this);
    }
  }

  static load(id: string): State | null {
    return changetype<State | null>(store.get("State", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentRoll(): string | null {
    let value = this.get("currentRoll");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRoll(value: string | null) {
    if (!value) {
      this.unset("currentRoll");
    } else {
      this.set("currentRoll", Value.fromString(<string>value));
    }
  }

  get rollCount(): i32 {
    let value = this.get("rollCount");
    return value!.toI32();
  }

  set rollCount(value: i32) {
    this.set("rollCount", Value.fromI32(value));
  }

  get diagnosedCount(): i32 {
    let value = this.get("diagnosedCount");
    return value!.toI32();
  }

  set diagnosedCount(value: i32) {
    this.set("diagnosedCount", Value.fromI32(value));
  }

  get diagnosedTokenIds(): Array<i32> {
    let value = this.get("diagnosedTokenIds");
    return value!.toI32Array();
  }

  set diagnosedTokenIds(value: Array<i32>) {
    this.set("diagnosedTokenIds", Value.fromI32Array(value));
  }
}

export class Roll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("requestedAt", Value.fromBigInt(BigInt.zero()));
    this.set("requestTxHash", Value.fromString(""));
    this.set("probability", Value.fromBigInt(BigInt.zero()));
    this.set("diagnoses", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Roll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Roll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Roll", id.toString(), this);
    }
  }

  static load(id: string): Roll | null {
    return changetype<Roll | null>(store.get("Roll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestedAt(): BigInt {
    let value = this.get("requestedAt");
    return value!.toBigInt();
  }

  set requestedAt(value: BigInt) {
    this.set("requestedAt", Value.fromBigInt(value));
  }

  get requestTxHash(): string {
    let value = this.get("requestTxHash");
    return value!.toString();
  }

  set requestTxHash(value: string) {
    this.set("requestTxHash", Value.fromString(value));
  }

  get appliedAt(): BigInt | null {
    let value = this.get("appliedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set appliedAt(value: BigInt | null) {
    if (!value) {
      this.unset("appliedAt");
    } else {
      this.set("appliedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get applyTxHash(): string | null {
    let value = this.get("applyTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set applyTxHash(value: string | null) {
    if (!value) {
      this.unset("applyTxHash");
    } else {
      this.set("applyTxHash", Value.fromString(<string>value));
    }
  }

  get probability(): BigInt {
    let value = this.get("probability");
    return value!.toBigInt();
  }

  set probability(value: BigInt) {
    this.set("probability", Value.fromBigInt(value));
  }

  get useFallback(): boolean {
    let value = this.get("useFallback");
    return value!.toBoolean();
  }

  set useFallback(value: boolean) {
    this.set("useFallback", Value.fromBoolean(value));
  }

  get diagnoses(): Array<string> {
    let value = this.get("diagnoses");
    return value!.toStringArray();
  }

  set diagnoses(value: Array<string>) {
    this.set("diagnoses", Value.fromStringArray(value));
  }
}

export class Diagnosis extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("roll", Value.fromString(""));
    this.set("tokenId", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Diagnosis entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Diagnosis must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Diagnosis", id.toString(), this);
    }
  }

  static load(id: string): Diagnosis | null {
    return changetype<Diagnosis | null>(store.get("Diagnosis", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get roll(): string {
    let value = this.get("roll");
    return value!.toString();
  }

  set roll(value: string) {
    this.set("roll", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }
}
